
### breaking changes

- The `protocol` type, which used to generate abstract classes, is renamed to `interface` [#19][19] by [@eed3si9n][@eed3si9n]
- The `enumeration` type is renamed to `enum`, and the list of values are now called `symbols` (instead of `types`).

### enhancements

- Optional type support. See below.
- JSON codec generation. See below.
- An interface now supports `messages` list, which generates abstract methods. [#14][14] by [@Duhemm][@Duhemm]

### optional

sbt-datatype 0.2.1 adds support for optional types. Adding `?` at the end of a type name:

    {
      "types": [{
        "name": "Greeting",
        "type": "record",
        "target": "Scala",
        "fields": [{
          "name": "message",
          "type": "string?"
        }]
      }]
    }

[#22][22] by [@eed3si9n][@eed3si9n]

### JsonCodecPlugin

sbt-datatype 0.2.1 adds a new auto plugin `JsonCodecPlugin`, which generates JSON codec traits for [sjson-new][1].
Using the codecs, you can define a JSON protocol stack and convert the generated datatypes into JSON.

    {
      "codecNamespace": "com.example.codec",
      "fullCodec": "CustomProtocol",
      "types": [....]
    }

This will generate `JsonFormat` traits under `com.example.codec` package. See [JSON codec generation](http://www.scala-sbt.org/0.13/docs/Datatype.html#JSON+codec+generation) for more details.

[#15][15] etc by [@Duhemm][@Duhemm]/[@eed3si9n][@eed3si9n]

  [14]: https://github.com/sbt/sbt-datatype/pull/14
  [15]: https://github.com/sbt/sbt-datatype/pull/15
  [19]: https://github.com/sbt/sbt-datatype/pull/19
  [22]: https://github.com/sbt/sbt-datatype/pull/22
  [@eed3si9n]: https://github.com/eed3si9n
  [@jsuereth]: https://github.com/jsuereth
  [@dwijnand]: https://github.com/dwijnand
  [@Duhemm]: https://github.com/Duhemm
  [1]: https://github.com/eed3si9n/sjson-new
